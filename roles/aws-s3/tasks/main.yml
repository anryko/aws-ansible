---
- name: assert s3 config
  assert:
    that:
    - aws_s3_vpc is mapping
    - aws_s3_vpc.region is string
    - aws_s3_vpc.region | length > 0
    - aws_s3_srv is sequence
    - aws_s3_srv | length > 0
    - aws_s3_srv[0] is mapping
    msg: Role is misconfigured.
  tags:
  - always


- name: resolve and cache kms key to id map
  block:
  - name: discover s3 kms key arns from aliases
    aws_kms_info:
      region: "{{ aws_s3_vpc.region }}"
      filters:
        alias: "{{ item }}"
    when: not item.startswith('arn:')
    loop: >
      {{
        (aws_s3_srv | json_query('[].encryption_key'))
          | union([aws_s3_bucket_default.encryption_key])
          | unique
      }}
    register: aws_s3_kms_info_output

  - name: assert discovered key arns
    assert:
      that:
      - item is mapping
      - item['keys'] is sequence
      - item['keys'] | length == 1
      - item['keys'][0] is mapping
      - item['keys'][0].key_arn is defined
      - item['keys'][0].key_arn is string
      - item['keys'][0].key_arn.startswith('arn:aws:kms:' + aws_s3_vpc.region)
      msg: "KMS key '{{ item.item | d('null') }}' is misconfigured."
    loop: "{{ aws_s3_kms_info_output.results }}"

  - name: set s3 kms key alias to arn map
    set_fact:
      set_s3_kms_key_alias_to_arn_map: >
        {{
          set_s3_kms_key_alias_to_arn_map | d({}) | combine(
            {item.item: item['keys'][0].key_arn}
          )
        }}
    when: item.item not in (set_s3_kms_key_alias_to_arn_map | d({}))
    loop: "{{ aws_s3_kms_info_output.results }}"


- include_tasks: s3_buckets.yml
  loop: "{{ aws_s3_srv }}"  # List[Dict]
  loop_control:
    loop_var: s3_bucket
