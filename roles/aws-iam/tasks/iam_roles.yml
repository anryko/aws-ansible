---
# NOTE:
# - iam_role Dict is passed with include

- name: assert iam role config
  assert:
    that:
    - iam_role is mapping
    - iam_role.name is string
    - iam_role.name | length > 0
    msg: IAM role is misconfigured.


- name: "{{ iam_role.name }} > set role combined variable"
  set_fact:
    set_role: "{{
      aws_iam_role_default | combine(iam_role, recursive=True)
    }}"  # Dict


- name: "{{ set_role.name }} > assert role type"
  assert:
    that:
    - set_role.policies | length == 0
    msg: >-
      IAM role name defined as ARN is assumed to belong to a foreign
      AWS account, therefore is not managed locally and can't have
      policies defined.
  when: set_role.name.startswith('arn:aws:')


- name: "{{ set_role.name }} > manage iam role"
  iam_role:
    state: present
    name: "{{ set_role.name }}"
    assume_role_policy_document: "{{
      set_role.trust_policy
      if (
        set_role.assume_policy_type is not defined
        or set_role.assume_policy_type | length == 0
      )
      else lookup('template', 'policy.json.j2')
    }}"
    managed_policy: "{{ set_role.policies }}"
  async: 20
  poll: 0
  register: async_output
  changed_when: False
  when: not set_role.name.startswith('arn:aws:')


- name: "{{ set_role.name }} > warning"
  debug:
    msg: >-
      IAM role name defined as ARN is assumed to belong to a foreign
      AWS account, therefore is not managed locally.
  when: set_role.name.startswith('arn:aws:')


- name: "{{ set_role.name }} > append async results list"
  set_fact:
    async_output_results: "{{ async_output_results + [async_output | d({})] }}"
